1. 第一阶段分析报告merge脚本，从0到1的过程。困难与解决：
	5月底：面对excel表格没有处理经验 -- 请研发同事帮忙，使用openpyxl库虽然问题没解决，但提供了解决问题的思路
	5月底：对Python库不熟悉 -- 百度与b站结合学习，了解openpyxl库，同时了解到pandas，为后期优化提供了很大的帮助
	6月第一版openpyxl实现merge脚本后在7月setup上发现性能问题 -- 第一版merge脚本Ac merge大概在40min左右，setup预计几十个小时，完全不能满足需求。尝试在openpyxl优化脚本逻辑，如Python多线程等，发现不能解决问题，后来目光投向pandas，并实现第一版纯pandas库实现的merge脚本，setup merge大概在几十秒之内，性能问题解决了，但引入了图片问题
	7月：纯pandas库merge脚本图片问题 -- 尝试调研excel内部结构，虽然发现了一些规则但是不全面导致没能解决问题；另辟蹊径，让excel自己解决图片问题，结合openpyxl能解决图片问题和pandas解决查询性能问题，开发第一版版openpyxl半pandas脚本性能和图片都处理成功的脚本，Ac merge时间将到了十多分钟，setup也能在1个小时之内
	8月中：merge脚本再优化 -- 在后期对openpyxl和pandas库的熟悉，对merge脚本进行进一步优化，实现主线pandas，写数据用openpyxl，实现门禁merge时间缩短至setup约40s，其他约15s
	直至11月：持续完成merge脚本中bug修复，其中built-in部分merge由于存在大量的语法格式，导致产生奇奇怪怪的语法问题导致merge失败，其中"\1"使用过多个解决方案均未真正解决，直到11月初才真正解决
2. 反标CAresult脚本
	7月：验收新需求的到来，在6月的openpyxl的逻辑上设计并实现第一版反标CA结果的反标脚本，并在每次交付或模拟交付时根据分析未成功标记的merge逐步优化其中遇到的异常场景和现有的脚本issue。在7-10月的每次交付或模拟交付时由于数据为清零，导致每次发现的反标问题都不全，反标脚本没办法一次性实现全面的优化，直至10底的模拟验收，数据清零，未成功标记的原因也全部分析完毕，一部分是反标脚本导致的，一部分我们是跑case的输出文件格式问题，一部分是CA跑case的配置与我们未同步导致的差异问题，11月初完成所有反标脚本问题和其他相关问题，并完成脚本性能优化重构
3. Python统计脚本
	6月开始通过黄区分析报告设计统计脚本需求，并在交付节点前逐步实现Ac、Ar、Setup和buil-in部分的结果统计
	
	
